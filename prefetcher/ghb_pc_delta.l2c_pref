#include "cache.h"
#include <stdio.h>

#define GHB_SIZE 1024
#define IT_SIZE 256
#define DELTA_RANGE 6000

typedef struct {
	unsigned long long int pc;
	unsigned int prev;
	unsigned long long int addr;
} GHB_ELEM;

GHB_ELEM ghb[GHB_SIZE] = {0};
unsigned int curr_idx = 0;

typedef struct {
	unsigned int prev;
} IDX_ELEM;

IDX_ELEM it[IT_SIZE] = {0};

typedef enum {
	DELTA1 = 0,
	DELTA2 = 1,
	COND1 = 2,
	COND2 = 3,
	FOUND_MATCH = 4
} STATE;

void CACHE::l2c_prefetcher_initialize() 
{
    printf("GHB PC/DC prefetching\n");
}

float no_match = 0.0f;
float match = 0.0f;
float cache_access = 0;
float cache_miss = 0;

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{    
    cache_access += 1.0;
    if (!cache_hit)
    {
        cache_miss += 1.0;
        // update index and global history tables on cache miss
        if (ghb[it[ip % IT_SIZE].prev].pc == ip)
        {
            ghb[curr_idx].prev = it[ip % IT_SIZE].prev;
        }
        else
        {
            ghb[curr_idx].prev = curr_idx; // break the pc linked list if ip does not match anymore (by pointing to itself)
        }
        ghb[curr_idx].addr = addr;
        ghb[curr_idx].pc = ip;
        it[ip % IT_SIZE].prev = curr_idx;
        // check for prefetching candidates
        unsigned int elem_idx = ghb[curr_idx].prev;
        STATE state = DELTA1;
        long long int delta1 = ghb[curr_idx].addr;
        long long int delta2 = 0;
        long long int delta = 0;
        unsigned int cnt = 0; // counter avoids infinite search loop

        while (ghb[elem_idx].prev != elem_idx && ghb[elem_idx].pc == ip && state != FOUND_MATCH && cnt < GHB_SIZE)
        {
            switch (state)
            {
            case DELTA1:
                //					printf("case DELTA1\n");
                delta1 = delta1 - ghb[elem_idx].addr;
                delta2 = ghb[elem_idx].addr;
                state = DELTA2;
                elem_idx = ghb[elem_idx].prev;
                break;
            case DELTA2:
                //					printf("case DELTA2\n");
                delta2 = delta2 - ghb[elem_idx].addr;
                state = COND1;
                delta = ghb[elem_idx].addr;
                elem_idx = ghb[elem_idx].prev;
                break;
            case COND1:
                cnt++;
                //					printf("case COND1\n");
                delta = delta - ghb[elem_idx].addr;
                if (delta == delta1)
                {
                    state = COND2;
                }
                delta = ghb[elem_idx].addr;
                //					printf("elem_idx: %d\n", elem_idx);
                elem_idx = ghb[elem_idx].prev;
                //					printf("delta: %lld\n", delta);
                //					printf("delta1: %lld\n", delta1);
                if (cnt >= GHB_SIZE)
                {
                    no_match += 1.0;
                }
                break;
            case COND2:
                //					printf("case COND2\n");
                delta = delta - ghb[elem_idx].addr;
                if (delta == delta2)
                {
                    //						printf("found match");

                    unsigned long long int lower;
                    unsigned long long int upper;
                    unsigned long long int high_delta;
                    unsigned long long int low_delta;

                    int out = 0;
                    if (delta1 >= delta2)
                    {
                        high_delta = delta1;
                        low_delta = delta2;
                    }
                    else
                    {
                        high_delta = delta2;
                        low_delta = delta1;
                    }
                    lower = (low_delta < 0) ? addr + low_delta : addr;
                    upper = (high_delta > 0) ? addr + high_delta : addr;
                    prefetch_line(ip, addr, lower, FILL_L2, 0);
                    prefetch_line(ip, addr, upper, FILL_L2, 0);
                    state = FOUND_MATCH;
                    match += 1.0;
                    elem_idx = ghb[elem_idx].prev;
                }
                else
                {
                    state = COND1;
                    delta = ghb[elem_idx].addr;
                }
                break;
            default:
                printf("Something went wrong!\n");
                break;
            }
        }
        curr_idx = (curr_idx + 1) % GHB_SIZE;
    }
    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{

}
