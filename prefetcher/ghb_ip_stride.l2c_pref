#include "cache.h"
#include <stdio.h>

#define PREFETCH_DEGREE 10
#define LOOK_HEAD 1
#define GHB_SIZE 256
#define IT_SIZE 256

typedef struct
{
    unsigned long long pc;      // 触发的PC值
    unsigned long long cl_addr; // 记录缓存行地址
    unsigned int prev;          // 链表指
} GHB_ENTRY;

GHB_ENTRY ghb[GHB_SIZE] = {0};

typedef struct
{
    unsigned int prev;
} IT_ENTRY;

IT_ENTRY it[IT_SIZE] = {0};

// 新地址要插入位置下标
unsigned int curr_idx = 0;

// 用于判断是否产生了预取条件
typedef enum
{
    STRIDE1,
    STRIDE2,
    COND,
    OVER
} STATE;

void CACHE::l2c_prefetcher_initialize()
{
    printf("GHB PC/CS prefetching\n");
}

float cache_access = 0;
float cache_miss = 0;

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    cache_access = cache_access + 1;
    if (!cache_hit)
    {
        cache_miss = cache_miss + 1;
    }
    // 缓存行地址
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    if (ghb[it[ip % IT_SIZE].prev].pc == ip)
    {
        ghb[curr_idx].prev = it[ip % IT_SIZE].prev;
    }
    else
    {
        ghb[curr_idx].prev = curr_idx;
    }
    ghb[curr_idx].cl_addr = cl_addr;
    ghb[curr_idx].pc = ip;
    it[ip % IT_SIZE].prev = curr_idx;

    for (int i = 0; i < GHB_SIZE; i++)
    {
        if (ghb[i].prev == curr_idx)
        {
            ghb[i].prev = i;
        }
    }

    uint64_t prefetch_addr;
    long long int stride1 = 0, stride2 = 0;
    unsigned int elem_idx = curr_idx;
    stride1 = ghb[curr_idx].cl_addr;
    STATE state = STRIDE1;

    while (ghb[elem_idx].prev != elem_idx && ghb[elem_idx].pc == ip && state != OVER)
    {
        unsigned int prev_idx = ghb[elem_idx].prev;
        switch (state)
        {
        case STRIDE1:
            stride2 = ghb[prev_idx].cl_addr;
            stride1 = stride1 - stride2;
            state = STRIDE2;
            elem_idx = prev_idx;
            break;
        case STRIDE2:
            stride2 = stride2 - ghb[prev_idx].cl_addr;
            state = COND;
            break;
        case COND:
            if (stride1 == stride2)
            {
                for (int i = LOOK_HEAD; i <= LOOK_HEAD + PREFETCH_DEGREE; i++)
                {
                    prefetch_addr = (cl_addr + i * stride1) << LOG2_BLOCK_SIZE;
                    // if (MSHR.occupancy < (MSHR.SIZE >> 1))
                    prefetch_line(ip, addr, prefetch_addr, FILL_L2, 0);
                    // else
                    // prefetch_line(ip, addr, prefetch_addr, FILL_LLC, 0);
                }
            }
            state = OVER;
            break;
        default:
            state = OVER;
            break;
        }
    }
    // if (ghb[curr_idx].prev == curr_idx) {
    //     goto end;
    // }
    // addr1 = ghb[ghb[curr_idx].prev].addr;
    // if (ghb[ghb[curr_idx].prev].prev == ghb[curr_idx].prev || ghb[ghb[ghb[curr_idx].prev].prev].pc != ip) {
    //     goto end;
    // }
    // addr2 = ghb[ghb[ghb[curr_idx].prev].prev].addr;

    // s1 = addr - addr1;
    // s2 = addr1 - addr2;
    // if (s1 == s2) {
    //     for (int i = PRO_HEAD; i <= PRO_HEAD + PREFETCH_DEGREE + 1; i++) {
    //         prefetch_addr = addr + i * s1;
    //         if (MSHR.occupancy < (MSHR.SIZE>>1))
    //             prefetch_line(ip, addr, prefetch_addr, FILL_L2, 0);
    //         else
    //             prefetch_line(ip, addr, prefetch_addr, FILL_LLC, 0);
    //     }
    // }

    curr_idx = (curr_idx + 1) % GHB_SIZE;
    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
    printf("GHB PC/CS prefetching over\n");
}
